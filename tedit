#!/usr/bin/env python3
import os
import sys
import shlex
import shutil
import argparse
import subprocess
from time import sleep
from tempfile import mkstemp


description = """
TEdit - Temporary file Editor

Create and edit a temporary file, do whatever you want to do.
"""

parser = argparse.ArgumentParser(description=description,
                                 formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument("-f", "--file", help="Set the temporary file's default\n"
                    "content as FILE's content.")
parser.add_argument("-s", "--suffix", help="Use SUFFIX as the temporary\n"
                    "file's suffix (default is '.txt').")
parser.add_argument("-p", "--program", help="Use PROGRAM to run the "
                    "temporary file\n"
                    "instead of print the file out.")
parser.add_argument("-e", "--editor", help="Use EDITOR to edit the temporary"
                    "file\n(will try to finds the system default\n"
                    "editor if this argument is not giving).")

args = parser.parse_args()


def get_editor():

    if args.editor:
        editor_args = shlex.split(args.editor)

        if not editor_args[0] or not shutil.which(editor_args[0]):
            print("The editor which we're trying to use doesn't exist.")
            print("Please check your type, and run this program again.")
            sys.exit(1)

        editor_args[0] = shutil.which(editor_args[0])
        return editor_args


    editor = os.getenv('VISUAL', os.getenv('EDITOR'))

    if not editor or not shutil.which(editor):
        print("There's no default editor on your system or we can't find it.")
        print("Please set the editor which you want to use by '-e' argument.")
        sys.exit(1)
    else:
        editor = shutil.which(editor)

    return [editor]


if args.file and not args.suffix:
    suffix = os.path.splitext(args.file)[1]
else:
    suffix = '.' + (args.suffix.strip('.') if args.suffix else 'txt')


fd, fname = mkstemp(suffix=suffix)
os.close(fd)


if args.file:
    shutil.copy(args.file, fname)


if sys.platform == 'linux':
    subprocess.call([*get_editor(), fname])

elif sys.platform == 'win32':
    os.system(fname)

else:
    print("Sorry, tedit doesn't support the platform you're using yet")
    sys.exit(1)


if args.file:
    with open(fname) as f, open(args.file) as of:
        if f.read() == of.read():
            sys.exit(0)


if args.program:
    subprocess.call([*shlex.split(args.program), fname])
    sleep(2)

else:
    with open(fname) as f:
        for i in f:
            print(i.rstrip('\n'))


os.remove(fname)
