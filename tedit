#!/usr/bin/env python3
import os
import sys
import shlex
import shutil
import argparse
import subprocess
from time import sleep
from tempfile import mkstemp


description = """
TEdit - Let you edit the stdout

Edit the stdout by your avorite editor,
or run (open) stdout by a program if you like.

For more details, please check: https://github.com/K-Guan/tedit
"""

parser = argparse.ArgumentParser(description=description,
                                 formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument("-f", "--file", help="Edit the file as a temporary file")
parser.add_argument("-s", "--suffix", help="Set the temporary file's suffix")
parser.add_argument("-p", "--program", help="Program you want to 'run stdout'")

parser.add_argument("-e", "--editor", help="Use anoter editor"
                    " instead of the system default")

args = parser.parse_args()


def get_editor():

    if args.editor:
        editor_args = shlex.split(args.editor)

        if not editor_args[0] or not shutil.which(editor_args[0]):
            print("The editor which we're trying to use doesn't exist.")
            print("Please check your type, and run this program again.")
            raise SystemExit(1)

        editor_args[0] = shutil.which(editor_args[0])
        return editor_args


    editor = os.getenv('VISUAL', os.getenv('EDITOR'))

    if not editor or not shutil.which(editor):
        print("There's no default editor on your system or we can't get it.")
        print("Please set the editor which you want to use by '-e' argument.")
        raise SystemExit(1)
    else:
        editor = shutil.which(editor)

    return [editor]


if args.file and not args.suffix:
    suffix = os.path.splitext(args.file)[1]
else:
    suffix = '.' + (args.suffix.strip('.') if args.suffix else 'txt')


fd, fname = mkstemp(suffix=suffix)
os.close(fd)


if args.file:
    shutil.copy(args.file, fname)


if sys.platform == 'linux':
    subprocess.call([*get_editor(), fname])

elif sys.platform == 'win32':
    os.system(fname)

else:
    print("Sorry, your platform isn't support yet. "
          "Please run this program on Windows or Linux.")
    sys.exit(1)


if args.program:
    subprocess.call([*shlex.split(args.program), fname])
    sleep(2)

else:
    with open(fname) as f:
        for i in f:
            print(i.rstrip('\n'))


os.remove(fname)
